name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Using H2 in-memory database for tests - no external services needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run unit tests
      run: mvn clean test -Dspring.profiles.active=test

    - name: Run integration tests
      run: mvn verify -Dspring.profiles.active=test

    - name: Generate test coverage report
      run: mvn jacoco:report

    - name: Check coverage threshold
      run: mvn jacoco:check

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  newman-tests:
    runs-on: ubuntu-latest
    needs: test
    
    # Using H2 in-memory database for Newman tests - no external services needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Start application
      run: |
        java -jar target/*.jar --spring.profiles.active=test &
        echo $! > app.pid
      env:
        JWT_SECRET: mySecretKey123456789012345678901234567890

    - name: Wait for application to start
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 2; done'

    - name: Install Newman
      run: npm install -g newman

    - name: Run Newman tests
      run: newman run postman_collection.json -e postman_environment.json --reporters cli,junit --reporter-junit-export newman-results.xml

    - name: Stop application
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid)
        fi

    - name: Publish Newman test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Newman API Tests
        path: newman-results.xml
        reporter: java-junit

  build-docker:
    runs-on: ubuntu-latest
    needs: [test, newman-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: qr-ordering-locator:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-app -p 8080:8080 \
          -e SPRING_PROFILES_ACTIVE=test \
          -e SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb \
          qr-ordering-locator:latest
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        docker stop test-app