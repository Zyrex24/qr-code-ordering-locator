{
  "info": {
    "_postman_id": "12345678-1234-1234-1234-123456789012",
    "name": "QR Code Ordering Locator API",
    "description": "Complete API test suite for QR Code Ordering Locator system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "jwt_admin",
      "value": "",
      "type": "string"
    },
    {
      "key": "jwt_cashier",
      "value": "",
      "type": "string"
    },
    {
      "key": "jwt_customer",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Response has token', () => pm.expect(pm.response.json().token).to.exist);",
                  "pm.test('User role is ADMIN', () => pm.expect(pm.response.json().role).to.equal('ADMIN'));",
                  "pm.environment.set('jwt_admin', pm.response.json().token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@qrlocator.com\",\n  \"password\": \"Admin@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Cashier Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Response has token', () => pm.expect(pm.response.json().token).to.exist);",
                  "pm.test('User role is CASHIER', () => pm.expect(pm.response.json().role).to.equal('CASHIER'));",
                  "pm.environment.set('jwt_cashier', pm.response.json().token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"cashier@qrlocator.com\",\n  \"password\": \"Cashier@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Customer Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Response has token', () => pm.expect(pm.response.json().token).to.exist);",
                  "pm.test('User role is CUSTOMER', () => pm.expect(pm.response.json().role).to.equal('CUSTOMER'));",
                  "pm.environment.set('jwt_customer', pm.response.json().token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"alice@example.com\",\n  \"password\": \"Customer@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Menu",
      "item": [
        {
          "name": "Get Menu Without Table",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Response has categories', () => pm.expect(pm.response.json().categories).to.be.an('array'));",
                  "pm.test('Categories not empty', () => pm.expect(pm.response.json().categories.length).to.be.above(0));",
                  "pm.test('Restaurant info exists', () => pm.expect(pm.response.json().restaurant).to.exist);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/menu",
              "host": ["{{baseUrl}}"],
              "path": ["api", "menu"]
            }
          }
        },
        {
          "name": "Get Menu With Table",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Response has table info', () => pm.expect(pm.response.json().table).to.exist);",
                  "pm.test('Table number is correct', () => pm.expect(pm.response.json().table.number).to.equal(1));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/menu?table_id=1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "menu"],
              "query": [
                {
                  "key": "table_id",
                  "value": "1"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.test('Order has ID', () => pm.expect(json.id).to.exist);",
                  "pm.test('Order status is PENDING', () => pm.expect(json.status).to.equal('PENDING'));",
                  "pm.test('Total price calculated correctly', () => pm.expect(json.totalPrice).to.equal(25.98));",
                  "pm.environment.set('orderId', json.id);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_customer}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerId\": 3,\n  \"tableId\": 1,\n  \"items\": [\n    {\n      \"productId\": 1,\n      \"quantity\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            }
          }
        },
        {
          "name": "Get Order by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Order ID matches', () => pm.expect(pm.response.json().id).to.equal(parseInt(pm.environment.get('orderId'))));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_customer}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            }
          }
        },
        {
          "name": "Update Order Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "pm.test('Status updated to IN_PREPARATION', () => pm.expect(pm.response.json().status).to.equal('IN_PREPARATION'));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_cashier}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"IN_PREPARATION\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "status"]
            }
          }
        }
      ]
    }
  ]
}